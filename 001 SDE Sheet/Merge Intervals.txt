// TC : O(NlogN), AS : O(N)

class SortByRange implements Comparator<int[]> {
    @Override
    public int compare(int[] a, int[] b)
    {
        return a[0] - b[0];
    }
}

class Solution {

    public int[][] merge(int[][] intervals) {
        List<List<Integer>> list = new ArrayList<>();
        
        Arrays.sort(intervals, new SortByRange());
        list.add(new ArrayList<Integer>(Arrays.asList(intervals[0][0], intervals[0][1])));

        int lastVal1, lastVal2;

        for (int i = 1; i < intervals.length; i++) {

            int val1 = intervals[i][0];
            int val2 = intervals[i][1];
            
            lastVal1 = list.get(list.size() - 1).get(0);
            lastVal2 = list.get(list.size() - 1).get(1);

            if (lastVal2 >= val1) {
                lastVal1 = Math.min(lastVal1, val1);
                lastVal2 = Math.max(lastVal2, val2);
                list.get(list.size() - 1).set(0, lastVal1);
                list.get(list.size() - 1).set(1, lastVal2);
            } else {
                list.add(new ArrayList<Integer>(Arrays.asList(val1, val2)));
            }
        }

        int[][] res = list.stream()
        .map(l -> l.stream()
        .mapToInt(Integer::intValue).toArray())
        .toArray(int[][]::new);

        return res;
    }
}