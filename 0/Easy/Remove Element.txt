class Solution {
    public int removeElement(int[] nums, int val) {
        int pos_zero = 0;
        int pos_curr = 0;
        while (pos_curr < nums.length){
            if (nums[pos_curr] == val) {
                pos_curr++;
            } else {
                nums[pos_zero] = nums[pos_curr];
                pos_curr++;
                pos_zero++;
            }
        }

        return pos_zero;
    }
}


// Alter

class Solution {
    public int removeElement(int[] nums, int val) {
        HashMap<Integer, Integer> myMap = new HashMap<>();
        for (int i = 0; i < nums.length; i++) {
            if (myMap.containsKey(nums[i])) {
                int increasedCount = myMap.get(nums[i]) + 1;
                myMap.put(nums[i], increasedCount);
            }
            else {
                myMap.put(nums[i], 1);
            }
        
            nums[i] = -1;
        }

        // System.out.println(myMap);

        int countOfVal = myMap.containsKey(val) ? myMap.get(val) : -1;
        int idx = 0;

        Iterator mapIterator = myMap.entrySet().iterator();
        while (mapIterator.hasNext()) {

            Map.Entry mapElement = (Map.Entry)mapIterator.next();
            int key = (int)mapElement.getKey();
            int value = (int)mapElement.getValue();

            if (key == val) {
                continue;
            }

            int countOfNum = value;

            for (int i = 1; i <= countOfNum; i++) {
                nums[idx] = key;
                idx++;
            } 
        }

        int newLength = nums.length - countOfVal;

        return newLength;
    }
}